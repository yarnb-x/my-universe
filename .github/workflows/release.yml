name: Release - 版本发布

on:
  push:
    tags:
      - 'v*.*.*'

# 添加权限配置，允许创建 Release 和上传构建产物
permissions:
  contents: write  # 允许创建 Release 和上传文件
  packages: read   # 允许读取包

env:
  CARGO_TERM_COLOR: always

jobs:
  # 发布前检查
  pre-release-check:
    name: 发布前检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 验证标签格式
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "[ERROR] 标签格式不正确！应该是 v*.*.*"
            exit 1
          fi
          echo "[SUCCESS] 标签格式正确: ${{ github.ref_name }}"

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 运行代码检查
        run: npm run lint

      - name: 构建检查
        run: npm run build

  # Tauri 构建和发布
  build-tauri:
    name: 构建 Tauri 应用
    needs: pre-release-check
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: 'macos-latest'
          #   args: '--target aarch64-apple-darwin'
          #   arch: 'aarch64'
          # - platform: 'macos-latest' 
          #   args: '--target x86_64-apple-darwin'
          #   arch: 'x86_64'
          # - platform: 'ubuntu-22.04'
          #   args: ''
          #   arch: 'x86_64'
          - platform: 'windows-latest'
            args: ''
            arch: 'x86_64'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安装 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装 uv
        uses: astral-sh/setup-uv@v3

      - name: 安装系统依赖 (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: 安装前端依赖
        run: npm ci

      - name: 构建 Python Sidecar
        env:
          TAURI_TARGET_TRIPLE: ${{ matrix.platform == 'macos-latest' && (matrix.arch == 'aarch64' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin') || '' }}
        run: npm run build-python

      - name: 构建 Tauri 应用
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          VITE_VML_LICENSE: ${{ secrets.VITE_VML_LICENSE }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'My Universe ${{ github.ref_name }}'
          releaseBody: |
            🎉 **My Universe ${{ github.ref_name }}** 发布！

            ## 📋 更新内容
            查看 [提交记录](https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}) 了解详细更改。

            ---
            ❤️ 感谢使用 My Universe！如有问题请提交 [Issue](https://github.com/${{ github.repository }}/issues)
          releaseDraft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          includeUpdaterJson: true
          args: ${{ matrix.args }}

  # 更新 Gist 清单
  update-gist-manifest:
    name: 更新 Gist 更新清单
    needs: build-tauri
    runs-on: ubuntu-latest
    steps:
      - name: 下载 latest.json 文件
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          # Tauri Action 自动生成 latest.json 文件
          gh release download ${{ github.ref_name }} --repo $GH_REPO --pattern "latest.json" || echo "latest.json 文件不存在"
          
          # 检查文件是否存在
          if [ -f "latest.json" ]; then
            echo "找到 latest.json 文件:"
            cat latest.json
          else
            echo "未找到 latest.json 文件，可能需要在 tauri.conf.json 中启用 updater 配置"
            exit 1
          fi

      - name: 更新 Gist 清单文件
        uses: popsiclestick/gist-sync-action@v1.2.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gist_url: https://gist.github.com/yarnb-x/494fee5048e024f1f7c057d2d175de51
          gist_title: "latest.json"
          gist_description: "应用自动更新清单文件 - 由 GitHub Actions 自动维护"
          github_file: latest.json

  # 发布完成通知
  post-release:
    name: 发布完成
    needs: [build-tauri, update-gist-manifest]
    runs-on: ubuntu-latest
    steps:
      - name: 发布成功通知
        run: |
          echo "[SUCCESS] 版本 ${{ github.ref_name }} 发布成功！"
          echo "[INFO] 构建产物已上传到 GitHub Releases"
          echo "[INFO] 下载链接: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" 